"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/monitor/page",{

/***/ "(app-pages-browser)/./components/plantdata.tsx":
/*!**********************************!*\
  !*** ./components/plantdata.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePlantData: function() { return /* binding */ usePlantData; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\nfunction transformData(apiData) {\n    // Tạo mảng thời gian từ dữ liệu nhiệt độ\n    const timestamps = apiData.nhiet_do.map((data)=>data.created_at);\n    // Tạo mảng dữ liệu cho mỗi loại cảm biến\n    const temperatureData = apiData.nhiet_do.map((data)=>parseFloat(data.value));\n    const humidityData = apiData.do_am.map((data)=>parseFloat(data.value));\n    const soilData = apiData.am_dat.map((data)=>parseFloat(data.value));\n    const lightData = apiData.anh_sang.map((data)=>parseFloat(data.value));\n    // Tìm độ dài tối đa của các mảng dữ liệu\n    const maxLength = Math.max(timestamps.length, temperatureData.length, humidityData.length, soilData.length, lightData.length);\n    // Tạo mảng kết quả với tất cả dữ liệu\n    const result = [];\n    for(let i = 0; i < maxLength; i++){\n        const timestamp = timestamps[i] || new Date().toISOString();\n        const date = new Date(timestamp);\n        result.push({\n            time: date.toLocaleString(\"en-US\", {\n                hour12: true,\n                timeZone: \"Asia/Ho_Chi_Minh\",\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n                second: \"2-digit\"\n            }),\n            temperature: temperatureData[i] || 0,\n            humidity: humidityData[i] || 0,\n            soil: soilData[i] || 0,\n            light: lightData[i] || 0\n        });\n    }\n    return result;\n}\nfunction usePlantData() {\n    _s();\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchData = async ()=>{\n            try {\n                const response = await fetch(\"http://localhost:5000/api/sensors/all\");\n                if (!response.ok) {\n                    throw new Error(\"Failed to fetch data\");\n                }\n                const result = await response.json();\n                console.log(\"Received data from API:\", result);\n                setData(transformData(result));\n            } catch (err) {\n                console.error(\"Error fetching data:\", err);\n                setError(err instanceof Error ? err.message : \"An error occurred\");\n            } finally{\n                setLoading(false);\n            }\n        };\n        fetchData();\n        // Set up polling every 10 seconds\n        const interval = setInterval(fetchData, 10000);\n        return ()=>clearInterval(interval);\n    }, []);\n    return {\n        data,\n        loading,\n        error\n    };\n}\n_s(usePlantData, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvcGxhbnRkYXRhLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBNkI1QyxTQUFTRSxjQUFjQyxPQUFvQjtJQUN6Qyx5Q0FBeUM7SUFDekMsTUFBTUMsYUFBYUQsUUFBUUUsUUFBUSxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS0MsVUFBVTtJQUVqRSx5Q0FBeUM7SUFDekMsTUFBTUMsa0JBQWtCTixRQUFRRSxRQUFRLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxPQUM1Q0csV0FBV0gsS0FBS0ksS0FBSztJQUV2QixNQUFNQyxlQUFlVCxRQUFRVSxLQUFLLENBQUNQLEdBQUcsQ0FBQyxDQUFDQyxPQUFTRyxXQUFXSCxLQUFLSSxLQUFLO0lBQ3RFLE1BQU1HLFdBQVdYLFFBQVFZLE1BQU0sQ0FBQ1QsR0FBRyxDQUFDLENBQUNDLE9BQVNHLFdBQVdILEtBQUtJLEtBQUs7SUFDbkUsTUFBTUssWUFBWWIsUUFBUWMsUUFBUSxDQUFDWCxHQUFHLENBQUMsQ0FBQ0MsT0FBU0csV0FBV0gsS0FBS0ksS0FBSztJQUV0RSx5Q0FBeUM7SUFDekMsTUFBTU8sWUFBWUMsS0FBS0MsR0FBRyxDQUN4QmhCLFdBQVdpQixNQUFNLEVBQ2pCWixnQkFBZ0JZLE1BQU0sRUFDdEJULGFBQWFTLE1BQU0sRUFDbkJQLFNBQVNPLE1BQU0sRUFDZkwsVUFBVUssTUFBTTtJQUdsQixzQ0FBc0M7SUFDdEMsTUFBTUMsU0FBc0IsRUFBRTtJQUM5QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsV0FBV0ssSUFBSztRQUNsQyxNQUFNQyxZQUFZcEIsVUFBVSxDQUFDbUIsRUFBRSxJQUFJLElBQUlFLE9BQU9DLFdBQVc7UUFDekQsTUFBTUMsT0FBTyxJQUFJRixLQUFLRDtRQUN0QkYsT0FBT00sSUFBSSxDQUFDO1lBQ1ZDLE1BQU1GLEtBQUtHLGNBQWMsQ0FBQyxTQUFTO2dCQUNqQ0MsUUFBUTtnQkFDUkMsVUFBVTtnQkFDVkMsTUFBTTtnQkFDTkMsT0FBTztnQkFDUEMsS0FBSztnQkFDTEMsTUFBTTtnQkFDTkMsUUFBUTtnQkFDUkMsUUFBUTtZQUNWO1lBQ0FDLGFBQWE5QixlQUFlLENBQUNjLEVBQUUsSUFBSTtZQUNuQ2lCLFVBQVU1QixZQUFZLENBQUNXLEVBQUUsSUFBSTtZQUM3QmtCLE1BQU0zQixRQUFRLENBQUNTLEVBQUUsSUFBSTtZQUNyQm1CLE9BQU8xQixTQUFTLENBQUNPLEVBQUUsSUFBSTtRQUN6QjtJQUNGO0lBRUEsT0FBT0Q7QUFDVDtBQUVPLFNBQVNxQjs7SUFDZCxNQUFNLENBQUNwQyxNQUFNcUMsUUFBUSxHQUFHM0MsK0NBQVFBLENBQWMsRUFBRTtJQUNoRCxNQUFNLENBQUM0QyxTQUFTQyxXQUFXLEdBQUc3QywrQ0FBUUEsQ0FBQztJQUN2QyxNQUFNLENBQUM4QyxPQUFPQyxTQUFTLEdBQUcvQywrQ0FBUUEsQ0FBZ0I7SUFFbERELGdEQUFTQSxDQUFDO1FBQ1IsTUFBTWlELFlBQVk7WUFDaEIsSUFBSTtnQkFDRixNQUFNQyxXQUFXLE1BQU1DLE1BQU07Z0JBQzdCLElBQUksQ0FBQ0QsU0FBU0UsRUFBRSxFQUFFO29CQUNoQixNQUFNLElBQUlDLE1BQU07Z0JBQ2xCO2dCQUNBLE1BQU0vQixTQUFTLE1BQU00QixTQUFTSSxJQUFJO2dCQUNsQ0MsUUFBUUMsR0FBRyxDQUFDLDJCQUEyQmxDO2dCQUN2Q3NCLFFBQVExQyxjQUFjb0I7WUFDeEIsRUFBRSxPQUFPbUMsS0FBSztnQkFDWkYsUUFBUVIsS0FBSyxDQUFDLHdCQUF3QlU7Z0JBQ3RDVCxTQUFTUyxlQUFlSixRQUFRSSxJQUFJQyxPQUFPLEdBQUc7WUFDaEQsU0FBVTtnQkFDUlosV0FBVztZQUNiO1FBQ0Y7UUFFQUc7UUFDQSxrQ0FBa0M7UUFDbEMsTUFBTVUsV0FBV0MsWUFBWVgsV0FBVztRQUN4QyxPQUFPLElBQU1ZLGNBQWNGO0lBQzdCLEdBQUcsRUFBRTtJQUVMLE9BQU87UUFBRXBEO1FBQU1zQztRQUFTRTtJQUFNO0FBQ2hDO0dBOUJnQkoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9wbGFudGRhdGEudHN4PzQ0MzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW50ZXJmYWNlIEFwaVJlc3BvbnNlIHtcclxuICBkb19hbTogQXJyYXk8e1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIGNyZWF0ZWRfYXQ6IHN0cmluZztcclxuICB9PjtcclxuICBuaGlldF9kbzogQXJyYXk8e1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIGNyZWF0ZWRfYXQ6IHN0cmluZztcclxuICB9PjtcclxuICBhbmhfc2FuZzogQXJyYXk8e1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIGNyZWF0ZWRfYXQ6IHN0cmluZztcclxuICB9PjtcclxuICBhbV9kYXQ6IEFycmF5PHtcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICBjcmVhdGVkX2F0OiBzdHJpbmc7XHJcbiAgfT47XHJcbn1cclxuXHJcbmludGVyZmFjZSBQbGFudERhdGEge1xyXG4gIHRpbWU6IHN0cmluZztcclxuICB0ZW1wZXJhdHVyZTogbnVtYmVyO1xyXG4gIGh1bWlkaXR5OiBudW1iZXI7XHJcbiAgc29pbDogbnVtYmVyO1xyXG4gIGxpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoYXBpRGF0YTogQXBpUmVzcG9uc2UpOiBQbGFudERhdGFbXSB7XHJcbiAgLy8gVOG6oW8gbeG6o25nIHRo4budaSBnaWFuIHThu6sgZOG7ryBsaeG7h3Ugbmhp4buHdCDEkeG7mVxyXG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBhcGlEYXRhLm5oaWV0X2RvLm1hcCgoZGF0YSkgPT4gZGF0YS5jcmVhdGVkX2F0KTtcclxuXHJcbiAgLy8gVOG6oW8gbeG6o25nIGThu68gbGnhu4d1IGNobyBt4buXaSBsb+G6oWkgY+G6o20gYmnhur9uXHJcbiAgY29uc3QgdGVtcGVyYXR1cmVEYXRhID0gYXBpRGF0YS5uaGlldF9kby5tYXAoKGRhdGEpID0+XHJcbiAgICBwYXJzZUZsb2F0KGRhdGEudmFsdWUpXHJcbiAgKTtcclxuICBjb25zdCBodW1pZGl0eURhdGEgPSBhcGlEYXRhLmRvX2FtLm1hcCgoZGF0YSkgPT4gcGFyc2VGbG9hdChkYXRhLnZhbHVlKSk7XHJcbiAgY29uc3Qgc29pbERhdGEgPSBhcGlEYXRhLmFtX2RhdC5tYXAoKGRhdGEpID0+IHBhcnNlRmxvYXQoZGF0YS52YWx1ZSkpO1xyXG4gIGNvbnN0IGxpZ2h0RGF0YSA9IGFwaURhdGEuYW5oX3NhbmcubWFwKChkYXRhKSA9PiBwYXJzZUZsb2F0KGRhdGEudmFsdWUpKTtcclxuXHJcbiAgLy8gVMOsbSDEkeG7mSBkw6BpIHThu5FpIMSRYSBj4bunYSBjw6FjIG3huqNuZyBk4buvIGxp4buHdVxyXG4gIGNvbnN0IG1heExlbmd0aCA9IE1hdGgubWF4KFxyXG4gICAgdGltZXN0YW1wcy5sZW5ndGgsXHJcbiAgICB0ZW1wZXJhdHVyZURhdGEubGVuZ3RoLFxyXG4gICAgaHVtaWRpdHlEYXRhLmxlbmd0aCxcclxuICAgIHNvaWxEYXRhLmxlbmd0aCxcclxuICAgIGxpZ2h0RGF0YS5sZW5ndGhcclxuICApO1xyXG5cclxuICAvLyBU4bqhbyBt4bqjbmcga+G6v3QgcXXhuqMgduG7m2kgdOG6pXQgY+G6oyBk4buvIGxp4buHdVxyXG4gIGNvbnN0IHJlc3VsdDogUGxhbnREYXRhW10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1heExlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2ldIHx8IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xyXG4gICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICB0aW1lOiBkYXRlLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIiwge1xyXG4gICAgICAgIGhvdXIxMjogdHJ1ZSxcclxuICAgICAgICB0aW1lWm9uZTogXCJBc2lhL0hvX0NoaV9NaW5oXCIsXHJcbiAgICAgICAgeWVhcjogXCJudW1lcmljXCIsXHJcbiAgICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxyXG4gICAgICAgIGRheTogXCIyLWRpZ2l0XCIsXHJcbiAgICAgICAgaG91cjogXCIyLWRpZ2l0XCIsXHJcbiAgICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcclxuICAgICAgICBzZWNvbmQ6IFwiMi1kaWdpdFwiLFxyXG4gICAgICB9KSxcclxuICAgICAgdGVtcGVyYXR1cmU6IHRlbXBlcmF0dXJlRGF0YVtpXSB8fCAwLFxyXG4gICAgICBodW1pZGl0eTogaHVtaWRpdHlEYXRhW2ldIHx8IDAsXHJcbiAgICAgIHNvaWw6IHNvaWxEYXRhW2ldIHx8IDAsXHJcbiAgICAgIGxpZ2h0OiBsaWdodERhdGFbaV0gfHwgMCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBsYW50RGF0YSgpIHtcclxuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZTxQbGFudERhdGFbXT4oW10pO1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hcGkvc2Vuc29ycy9hbGxcIik7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGRhdGFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGRhdGEgZnJvbSBBUEk6XCIsIHJlc3VsdCk7XHJcbiAgICAgICAgc2V0RGF0YSh0cmFuc2Zvcm1EYXRhKHJlc3VsdCkpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgZGF0YTpcIiwgZXJyKTtcclxuICAgICAgICBzZXRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogXCJBbiBlcnJvciBvY2N1cnJlZFwiKTtcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmZXRjaERhdGEoKTtcclxuICAgIC8vIFNldCB1cCBwb2xsaW5nIGV2ZXJ5IDEwIHNlY29uZHNcclxuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoZmV0Y2hEYXRhLCAxMDAwMCk7XHJcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4geyBkYXRhLCBsb2FkaW5nLCBlcnJvciB9O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInRyYW5zZm9ybURhdGEiLCJhcGlEYXRhIiwidGltZXN0YW1wcyIsIm5oaWV0X2RvIiwibWFwIiwiZGF0YSIsImNyZWF0ZWRfYXQiLCJ0ZW1wZXJhdHVyZURhdGEiLCJwYXJzZUZsb2F0IiwidmFsdWUiLCJodW1pZGl0eURhdGEiLCJkb19hbSIsInNvaWxEYXRhIiwiYW1fZGF0IiwibGlnaHREYXRhIiwiYW5oX3NhbmciLCJtYXhMZW5ndGgiLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwicmVzdWx0IiwiaSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImRhdGUiLCJwdXNoIiwidGltZSIsInRvTG9jYWxlU3RyaW5nIiwiaG91cjEyIiwidGltZVpvbmUiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwidGVtcGVyYXR1cmUiLCJodW1pZGl0eSIsInNvaWwiLCJsaWdodCIsInVzZVBsYW50RGF0YSIsInNldERhdGEiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJmZXRjaERhdGEiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJFcnJvciIsImpzb24iLCJjb25zb2xlIiwibG9nIiwiZXJyIiwibWVzc2FnZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/plantdata.tsx\n"));

/***/ })

});